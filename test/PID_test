
#include <Wire.h>
#include <WiFi.h>
#include <Adafruit_BMP280.h>
#include <MPU6050.h>
#include <WebServer.h>
#include <ESP32Servo.h>

// ========== WiFi Credentials ==========
const char *ssid = "DroneAP";
const char *password = "password123";

// ========== ESC Pins & Servo Objects ==========
const int escPins[4] = {12, 13, 14, 27};
int escValues[4] = {0, 0, 0, 0}; // Motor throttle signals (1000–2000 μs)
Servo escServos[4];

// ========== Sensor Objects ==========
MPU6050 mpu;
Adafruit_BMP280 bmp;

// ========== PID Variables ==========
float setRoll = 0, setPitch = 0, setYaw = 0, setAlt = 0; // Setpoints
float currentRoll = 0, currentPitch = 0, currentYaw = 0, currentAlt = 0;

float errorRoll, errorPitch, errorYaw, errorAlt;
float prevErrorRoll = 0, prevErrorPitch = 0, prevErrorYaw = 0, prevErrorAlt = 0;
float integralRoll = 0, integralPitch = 0, integralYaw = 0, integralAlt = 0;

// PID constants — TUNE THESE!
float kp = 1.2, ki = 0.04, kd = 0.7;
float kpAlt = 1.5, kiAlt = 0.02, kdAlt = 0.8;

// Webserver
WebServer server(80);
// ========== Global Variables ==========
unsigned long lastUpdate = 0;
float baseThrottle = 1000; // Minimum throttle
bool escArmed = false;
bool mpuCalibrated = false;
bool stabilizationEnabled = true;
float gyroOffsets[3] = {0, 0, 0};
float initialAlt = 0;
float hoverSetpoint = 0;
float currentPressure = 0;

// ========== Setup ==========
void setup()
{
  Serial.begin(115200);
  Wire.begin();

  for (int i = 0; i < 4; i++)
  {
    escServos[i].setPeriodHertz(50);             // 50 Hz
    escServos[i].attach(escPins[i], 1000, 2000); // min/max pulse width in us
  }

  // Arm ESCs: Max for 2s, then Min
  Serial.println("Arming ESCs...");
  for (int i = 0; i < 4; i++)
    escServos[i].writeMicroseconds(2000);
  delay(2000);
  for (int i = 0; i < 4; i++)
    escServos[i].writeMicroseconds(1000);
  delay(1000);
  escArmed = true;
  Serial.println("ESCs armed.");

  // Wait 5 seconds before continuing with setup
  Serial.println("Waiting 5 seconds before initializing sensors...");
  delay(5000);

  // Init MPU6050
  mpu.initialize();
  if (!mpu.testConnection())
  {
    Serial.println("MPU6050 connection failed");
    while (1)
      ;
  }

  // Calibrate MPU6050 gyro (dynamic leveling)
  Serial.println("Calibrating MPU6050...");
  long gyroSum[3] = {0, 0, 0};
  int16_t gx, gy, gz;
  for (int i = 0; i < 500; i++)
  {
    mpu.getRotation(&gx, &gy, &gz);
    gyroSum[0] += gx;
    gyroSum[1] += gy;
    gyroSum[2] += gz;
    delay(5);
  }
  gyroOffsets[0] = gyroSum[0] / 500.0;
  gyroOffsets[1] = gyroSum[1] / 500.0;
  gyroOffsets[2] = gyroSum[2] / 500.0;
  mpuCalibrated = true;
  Serial.printf("Gyro offsets: %.2f, %.2f, %.2f\n", gyroOffsets[0], gyroOffsets[1], gyroOffsets[2]);

  // Init BMP280
  if (!bmp.begin(0x76))
  {
    Serial.println("BMP280 not found");
    while (1)
      ;
  }
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                  Adafruit_BMP280::SAMPLING_X2,
                  Adafruit_BMP280::SAMPLING_X16,
                  Adafruit_BMP280::FILTER_X16,
                  Adafruit_BMP280::STANDBY_MS_500);
  delay(100);
  initialAlt = bmp.readAltitude(1013.25);
  hoverSetpoint = 0;
  Serial.printf("Initial Altitude: %.2f\n", initialAlt);

  setupWiFiServer();
}

void loop()
{
  unsigned long now = millis();
  float dt = (now - lastUpdate) / 1000.0;
  if (dt < 0.01)
    return;
  lastUpdate = now;

  // === Read MPU6050 Gyro/Accel ===
  int16_t gx, gy, gz;
  mpu.getRotation(&gx, &gy, &gz);
  currentRoll = (gx - gyroOffsets[0]) / 131.0; // deg/s
  currentPitch = (gy - gyroOffsets[1]) / 131.0;
  currentYaw = (gz - gyroOffsets[2]) / 131.0;

  // === Read BMP280 Altitude/Pressure ===
  currentPressure = bmp.readPressure();
  float absAlt = bmp.readAltitude(1013.25);
  currentAlt = absAlt - initialAlt; // Relative altitude

  float outputRoll = 0, outputPitch = 0, outputYaw = 0, outputAlt = 0;
  if (stabilizationEnabled)
  {
    // === PID: Roll (left/right tilt) ===
    errorRoll = setRoll - currentRoll;
    integralRoll += errorRoll * dt;
    float derivativeRoll = (errorRoll - prevErrorRoll) / dt;
    outputRoll = kp * errorRoll + ki * integralRoll + kd * derivativeRoll;
    prevErrorRoll = errorRoll;

    // === PID: Pitch (forward/backward tilt) ===
    errorPitch = setPitch - currentPitch;
    integralPitch += errorPitch * dt;
    float derivativePitch = (errorPitch - prevErrorPitch) / dt;
    outputPitch = kp * errorPitch + ki * integralPitch + kd * derivativePitch;
    prevErrorPitch = errorPitch;

    // === PID: Yaw (rotation) ===
    errorYaw = setYaw - currentYaw;
    integralYaw += errorYaw * dt;
    float derivativeYaw = (errorYaw - prevErrorYaw) / dt;
    outputYaw = kp * errorYaw + ki * integralYaw + kd * derivativeYaw;
    prevErrorYaw = errorYaw;

    // === PID: Altitude (hover) ===
    float hoverTarget = hoverSetpoint;
    if (setAlt > 0)
      hoverTarget = setAlt;
    errorAlt = hoverTarget - currentAlt;
    integralAlt += errorAlt * dt;
    float derivativeAlt = (errorAlt - prevErrorAlt) / dt;
    outputAlt = kpAlt * errorAlt + kiAlt * integralAlt + kdAlt * derivativeAlt;
    prevErrorAlt = errorAlt;
  }
  else
  {
    // Manual mode: only use setpoints, no stabilization
    outputRoll = setRoll;
    outputPitch = setPitch;
    outputYaw = setYaw;
    outputAlt = setAlt;
  }

  // === Motor Mixing (Quad X) ===
  escValues[0] = baseThrottle + outputPitch - outputRoll + outputYaw + outputAlt; // FL
  escValues[1] = baseThrottle + outputPitch + outputRoll - outputYaw + outputAlt; // FR
  escValues[2] = baseThrottle - outputPitch + outputRoll + outputYaw + outputAlt; // BR
  escValues[3] = baseThrottle - outputPitch - outputRoll - outputYaw + outputAlt; // BL

  // === Limit ESC signals and write using Servo ===
  for (int i = 0; i < 4; i++)
  {
    escValues[i] = constrain(escValues[i], 1000, 2000);
    escServos[i].writeMicroseconds(escValues[i]);
  }

  // Print status to serial
  Serial.printf("R:%.2f P:%.2f Y:%.2f Alt:%.2f Pres:%.2f\n", currentRoll, currentPitch, currentYaw, currentAlt, currentPressure);

  // Handle web server requests
  server.handleClient();
}

const char *htmlPage = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>Drone Control Panel</title>
  <style>
    body { font-family: sans-serif; padding: 20px; background: #f5f5f5; }
    input[type=range] { width: 100%; }
    .slider { margin-bottom: 20px; }
    .readout { background: #fff; padding: 10px; border-radius: 8px; margin-bottom: 20px; }
    .button-row { margin-bottom: 20px; }
    button { padding: 10px 20px; font-size: 16px; }
  </style>
</head>
<body>
  <h2>Drone WiFi Control</h2>
  <div class="readout">
    <b>Altitude:</b> <span id="altitude">0</span> m<br>
    <b>Pressure:</b> <span id="pressure">0</span> Pa<br>
    <b>Roll:</b> <span id="roll">0</span> deg<br>
    <b>Pitch:</b> <span id="pitch">0</span> deg<br>
    <b>Yaw:</b> <span id="yaw">0</span> deg/s<br>
    <b>Stabilization:</b> <span id="stabStatus">ON</span>
  </div>
  <div class="button-row">
    <button id="stabBtn" onclick="toggleStab()">Disable Stabilization</button>
    <button onclick="fetch('/hover?value=1')">Hover</button>
  </div>
  <div class="slider">
    <label>Throttle <span id="throttleVal">1000</span></label>
    <input type="range" min="1000" max="2000" value="1000" id="throttleSlider">
  </div>
  <div class="slider">
    <label>Pitch <span id="pitchSetVal">0</span></label>
    <input type="range" min="-20" max="20" value="0" id="pitchSlider">
  </div>
  <div class="slider">
    <label>Roll <span id="rollSetVal">0</span></label>
    <input type="range" min="-20" max="20" value="0" id="rollSlider">
  </div>
  <div class="slider">
    <label>Yaw <span id="yawSetVal">0</span></label>
    <input type="range" min="-50" max="50" value="0" id="yawSlider">
  </div>
  <div class="slider">
    <label>Hover Height <span id="hoverVal">0</span></label>
    <input type="range" min="0" max="100" value="0" id="hoverSlider">
  </div>
  <script>
    function update(id, val) {
      if (id === 'pitch') document.getElementById('pitchSetVal').innerText = val;
      else if (id === 'roll') document.getElementById('rollSetVal').innerText = val;
      else if (id === 'yaw') document.getElementById('yawSetVal').innerText = val;
      else if (id === 'hover') document.getElementById('hoverVal').innerText = val;
      else document.getElementById(id + 'Val').innerText = val;
      fetch(`/${id}?value=${val}`);
    }
    ['throttle', 'pitch', 'roll', 'yaw', 'hover'].forEach(id => {
      const el = document.getElementById(id + 'Slider');
      if (el) el.addEventListener('input', () => update(id, el.value));
    });

    // Keyboard mapping for WASD (left stick) and arrow keys (right stick)
    document.addEventListener('keydown', function(e) {
      let handled = false;
      // Left joystick: WASD
      if (e.key === 'w' || e.key === 'W') { update('throttle', Math.min(2000, Number(document.getElementById('throttleSlider').value) + 10)); handled = true; }
      if (e.key === 's' || e.key === 'S') { update('throttle', Math.max(1000, Number(document.getElementById('throttleSlider').value) - 10)); handled = true; }
      if (e.key === 'a' || e.key === 'A') { update('yaw', Math.max(-50, Number(document.getElementById('yawSlider').value) - 2)); handled = true; }
      if (e.key === 'd' || e.key === 'D') { update('yaw', Math.min(50, Number(document.getElementById('yawSlider').value) + 2)); handled = true; }
      // Right joystick: Arrow keys
      if (e.key === 'ArrowUp') { update('pitch', Math.min(20, Number(document.getElementById('pitchSlider').value) + 1)); handled = true; }
      if (e.key === 'ArrowDown') { update('pitch', Math.max(-20, Number(document.getElementById('pitchSlider').value) - 1)); handled = true; }
      if (e.key === 'ArrowLeft') { update('roll', Math.max(-20, Number(document.getElementById('rollSlider').value) - 1)); handled = true; }
      if (e.key === 'ArrowRight') { update('roll', Math.min(20, Number(document.getElementById('rollSlider').value) + 1)); handled = true; }
      if (handled) e.preventDefault();
    });

    function toggleStab() {
      fetch('/stab?toggle=1').then(r => r.json()).then(data => {
        document.getElementById('stabStatus').innerText = data.enabled ? 'ON' : 'OFF';
        document.getElementById('stabBtn').innerText = data.enabled ? 'Disable Stabilization' : 'Enable Stabilization';
      });
    }
    function poll() {
      fetch('/status').then(r => r.json()).then(data => {
        document.getElementById('altitude').innerText = data.altitude.toFixed(2);
        document.getElementById('pressure').innerText = data.pressure.toFixed(0);
        document.getElementById('roll').innerText = data.roll.toFixed(2);
        document.getElementById('pitch').innerText = data.pitch.toFixed(2);
        document.getElementById('yaw').innerText = data.yaw.toFixed(2);
        document.getElementById('stabStatus').innerText = data.stab ? 'ON' : 'OFF';
        document.getElementById('stabBtn').innerText = data.stab ? 'Disable Stabilization' : 'Enable Stabilization';
      });
    }
    setInterval(poll, 500);
    poll();
  </script>
</body>
</html>
)rawliteral";
// Toggle stabilization handler
void handleStab()
{
  if (server.hasArg("toggle"))
  {
    stabilizationEnabled = !stabilizationEnabled;
  }
  String json = "{";
  json += "\"enabled\":" + String(stabilizationEnabled ? "true" : "false");
  json += "}";
  server.send(200, "application/json", json);
}

// Called when slider value changes
void handleSlider()
{
  String value = server.arg("value");
  if (server.uri().indexOf("/throttle") != -1)
    baseThrottle = value.toFloat();
  if (server.uri().indexOf("/pitch") != -1)
    setPitch = value.toFloat();
  if (server.uri().indexOf("/roll") != -1)
    setRoll = value.toFloat();
  if (server.uri().indexOf("/yaw") != -1)
    setYaw = value.toFloat();
  if (server.uri().indexOf("/hover") != -1)
    hoverSetpoint = value.toFloat();
  server.send(200, "text/plain", "OK");
}

void handleHover()
{
  String value = server.arg("value");
  if (value == "1")
    hoverSetpoint = currentAlt;
  server.send(200, "text/plain", "Hovering");
}

void handleStatus()
{
  String json = "{";
  json += "\"altitude\":" + String(currentAlt, 2) + ",";
  json += "\"pressure\":" + String(currentPressure, 0) + ",";
  json += "\"roll\":" + String(currentRoll, 2) + ",";
  json += "\"pitch\":" + String(currentPitch, 2) + ",";
  json += "\"yaw\":" + String(currentYaw, 2) + ",";
  json += "\"stab\":" + String(stabilizationEnabled ? "true" : "false");
  json += "}";
  server.send(200, "application/json", json);
}

void handleRoot()
{
  server.send(200, "text/html", htmlPage);
}

void setupWiFiServer()
{
  WiFi.softAP(ssid, password);
  delay(1000);
  Serial.print("IP: ");
  Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/throttle", handleSlider);
  server.on("/pitch", handleSlider);
  server.on("/roll", handleSlider);
  server.on("/yaw", handleSlider);
  server.on("/hover", handleSlider);
  server.on("/hover", handleHover);
  server.on("/status", handleStatus);
  server.on("/stab", handleStab);
  server.begin();
}
